package duke;

import duke.task.Deadline;
import duke.task.Event;
import duke.task.Task;
import duke.task.ToDo;
import duke.task.TaskList;

import java.util.ArrayList;

public class Parser {
    private static final String BYE_COMMAND = "bye";
    private static final String LIST_COMMAND = "list";
    private static final String TODO_COMMAND = "todo";
    private static final String DEADLINE_COMMAND = "deadline";
    private static final String EVENT_COMMAND = "event";
    private static final String DONE_COMMAND = "done";
    private static final String DELETE_COMMAND = "delete";
    private static final String FIND_COMMAND = "find";

    private static final String DEADLINE_BY = "/by";
    private static final String EVENT_AT = "/at";

    /**
     * Returns a Task object that is generated by converting the string representation
     * of the Task object read from the storage file.
     *
     * @param taskInString the string representation of the Task object
     * @return a Task object generated from the its string representation, or
     * {@code null} if the string representation is corrupted or invalid
     */
    public static Task decodeTaskData(String taskInString) {
        try {
            String[] splitTaskStringArr = taskInString.split("[|]");
            String taskType = splitTaskStringArr[0].trim();
            String description = splitTaskStringArr[2].trim();
            boolean isDone = splitTaskStringArr[1].trim().equals("1");


            switch (taskType) {
                case "T":
                    ToDo todo = new ToDo(description);
                    if (isDone) {
                        todo.markAsDone();
                    }
                    return todo;
                case "D":
                    String taskDeadline = splitTaskStringArr[3].trim();
                    Deadline deadline = new Deadline(description, taskDeadline);
                    if (isDone) {
                        deadline.markAsDone();
                    }
                    return deadline;
                case "E":
                    String eventDateTime = splitTaskStringArr[3].trim();
                    Event event = new Event(description, eventDateTime);
                    if (isDone) {
                        event.markAsDone();
                    }
                    return event;
                default:
                    return null;
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            return null;
        }
    }


    /**
     * Returns the appropriate Command object by processing the user input.
     *
     * @param userInput the raw input entered by the user
     * @return a Command object representing the command to execute
     * @throws DukeException if the user provided an invalid input such that it cannot be used
     *                       to generate a Command object
     */
    public static void readUserInput(String userInput) throws DukeException {
        ArrayList<String> inputArguments = parseUserInput(userInput);
        runCommand(inputArguments);
    }

    /**
     * Parses the user input and return a String array containing the arguments retrieved
     * from the user input, where the arguments for the last 3 index are only present in
     * the array if they were supplied by the user:
     * <ul>
     *     <li>{@code String[0]} contain the command.</li>
     *     <li>{@code String[1]} contain the description.</li>
     *     <li>{@code String[2]} contain the command option (e.g. "/by" or "/at").</li>
     *     <li>{@code String[3]} contain the date and time information.</li>
     * </ul>
     *
     * @param data the raw input entered by the user
     * @return the list of arguments retrieved from the user input
     * @throws DukeException if the user has provided an input that cannot be parsed
     */
    private static ArrayList<String> parseUserInput(String data) throws DukeException {

        ArrayList<String> userArgs = new ArrayList<>();
        String[] userArgsArray = data.split(" ");

        try {
            for (String arg : userArgsArray) {
                userArgs.add(arg.trim());
            }
        } catch (ArrayIndexOutOfBoundsException exception) {
            throw new DukeException("Duke cannot read this: " + data);
        }

        return userArgs;
    }


    /**
     * Generates and return the Command object based on the argument list.
     *
     * @param inputArguments the argument list generated from the user input
     * @return a Command object representing the command to execute
     * @throws DukeException if the command failed the validation process or is not recognized by Duke
     */
    private static void runCommand(ArrayList<String> inputArguments) throws DukeException {
        String userCommand = inputArguments.get(0);
        switch (userCommand) {
        case BYE_COMMAND:
            System.out.println("Bye. Hope to see you again soon!");
            Ui.exitStatus = true;
            System.exit(0);
        case LIST_COMMAND:
            if (TaskList.getNumOfTask()!=0) {
                TaskList.printList();
            }else {
                System.out.println(TaskList.getNumOfTask());
                System.out.println("The list is empty!");
            }
        case DONE_COMMAND:
            String doneDescription = inputArguments.get(1);
            int doneTaskNum = Integer.parseInt(doneDescription);
            TaskList.getTask(doneTaskNum).markAsDone();
            System.out.println("Got it, I've marked this task as done:");
            System.out.println(TaskList.getTask(doneTaskNum));
        case DELETE_COMMAND:
            try {
                String deleteDescription = inputArguments.get(1);
                int deleteTaskNum = Integer.parseInt(deleteDescription);
                TaskList.deleteTaskFromList(deleteTaskNum);
            }catch (NumberFormatException e) {
                System.out.println("☹ OOPS!!! Please enter a task number.");
            }
        case FIND_COMMAND:

        case TODO_COMMAND:
            try {
                String toDoDescription = inputArguments.get(1);
                System.out.println(toDoDescription);
                ToDo todo = new ToDo(toDoDescription);
                TaskList.addTaskToList(todo);
            }catch(StringIndexOutOfBoundsException e){
                System.out.println("☹ OOPS!!! The description of a todo cannot be empty.");
            }
        case DEADLINE_COMMAND:
            String deadlineDescription = inputArguments.get(1);
            String taskDeadline = inputArguments.get(3);
            Deadline deadline = new Deadline(deadlineDescription,taskDeadline);
            TaskList.addTaskToList(deadline);
        case EVENT_COMMAND:
            String eventDescription = inputArguments.get(1);
            String eventDateTime = inputArguments.get(3);
            Event event = new Event(eventDescription, eventDateTime);
            TaskList.addTaskToList(event);
        default:
            throw new DukeException(" Command \"" + userCommand + "\" a valid command. :(");
        }
    }

}